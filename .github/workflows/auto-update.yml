
name: Update Dependencies

on:
  schedule:
    - cron: 24 3 * * *
  workflow_dispatch:
  push:
    branches:
      - master
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
 
env:
  NIXPKGS_ALLOW_UNFREE: 1

jobs:
  update-nix-packages:
    permissions:
      id-token: write
      contents: write
    if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Determinate Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Set up build enviroment
        run: |
          echo "Setting up direnv"
          nix profile install nixpkgs#direnv
          nix profile install nixpkgs#nix-direnv
          mkdir -p $HOME/.config/direnv
          echo "source $HOME/.nix-profile/share/nix-direnv/direnvrc" >> $HOME/.config/direnv/direnvrc
          echo "Setting up omnix"
          nix profile install nixpkgs#omnix
          echo "Setting up environment"
          direnv allow .
          direnv export gha > "$GITHUB_ENV"
          sudo hostnamectl set-hostname nixos

      - name: Omnix update flakes
        run: |
          om ci run .#update \
            --extra-access-tokens ${{ secrets.GITHUB_TOKEN }} \

      - name: Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: "flake.lock programs/nvim/lazy-lock.json"
          skip_checkout: false
          skip_dirty_check: false
          skip_fetch: false
          commit_message: "[ci] dependencies: auto-updated"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      # - name: Install Omnix
      #   run: nix profile install nixpkgs#omnix

      # - name: Run Omnix
      #   run: om ci run --results=om.json

      # - name: Push to Cachix
      #   env:
      #     CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
      #     BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      #   if: env.BRANCH_NAME == 'master'
      #   run: |
      #     nix run github:juspay/cachix-push -- \
      #       --subflake omnix \
      #       --prefix "${BRANCH_NAME}" \
      #       --cache om \
      #       < $HOME/omci.json
  build-flakes:
    permissions:
      id-token: write
      contents: write
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - runner: ubuntu-latest
            system: x86_64-linux
            host_command: sudo hostnamectl set-hostname nixos
          - runner: macos-latest
            system: aarch64-darwin
            host_command: sudo scutil --set HostName Emiles-Macbook-Pro
    needs: update-nix-packages
    steps:
      - name: Optimize Disk Space (Linux)
        uses: wimpysworld/nothing-but-nix@main
        if: runner.os == 'Linux'
        with:
          hatchet-protocol: 'rampage'

      - name: Optimize Disk Space (Darwin)
        uses: hugoalh/disk-space-optimizer-ghaction@v0.8.0
        if: runner.os == 'macOS'
        with:
          operate_async: "True"
          operate_sudo: "True"
          general_include: ".+"
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      # - name: Set up GitHub Actions cache
      #   uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Set up FlakeHub cache
        uses: DeterminateSystems/flakehub-cache-action@main

      # - uses: cachix/cachix-action@v15
      #   with:
      #     name: saberzero1
      #     extraPullNames: devenv,nixpkgs,nix-community,cachix,om,hyprland
      #     authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Set up build environment
        run: |
          echo "Setting up direnv"
          nix profile install nixpkgs#direnv
          nix profile install nixpkgs#nix-direnv
          mkdir -p $HOME/.config/direnv
          echo "source $HOME/.nix-profile/share/nix-direnv/direnvrc" >> $HOME/.config/direnv/direnvrc
          echo "Setting up omnix"
          nix profile install nixpkgs#omnix
          echo "Setting up environment"
          direnv allow .
          direnv export gha > "$GITHUB_ENV"
          echo "Setting hostname"
          ${{ matrix.host_command }}

      - name: Omnix build flakes
        env:
          FLAKE_ITER_NIX_SYSTEM: ${{ matrix.system }}
          FLAKE_ITER_FLAKEREF: ".#build"
        run: |
          om ci run $FLAKE_ITER_FLAKEREF \
            --extra-access-tokens "${{ secrets.GITHUB_TOKEN }}" \
            --systems "$FLAKE_ITER_NIX_SYSTEM" \
            --include-all-dependencies \
            -- --accept-flake-config
            # --results=$HOME/omci.json \
            # -- --accept-flake-config

  flakehub-push:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    needs: build-flakes
    if: ${{ always() }}
    outputs:
      flake_name: ${{ steps.publish.outputs.flake_name }}
      flake_version: ${{ steps.publish.outputs.flake_version }}
      flakeref_exact: ${{ steps.publish.outputs.flakeref_exact }}
      flakeref_at_least: ${{ steps.publish.outputs.flakeref_at_least }}
    steps:
      - name: Autorun
        run: "true"

      - name: Check build results
        run: |
          echo "A dependent in the build matrix failed."
          exit 1
        if: |
          contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Set up FlakeHub cache
        uses: DeterminateSystems/flakehub-cache-action@main

      - name: Push to FlakeHub
        uses: DeterminateSystems/flakehub-push@main
        id: publish
        with:
          # name: "saberzero1/croire"
          rolling: true
          visibility: "private"
          include-output-paths: true

